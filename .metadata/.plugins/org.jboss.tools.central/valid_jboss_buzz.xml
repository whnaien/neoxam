<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Beginners Guide - Building an Online Retail Web Shop Workshop (Domain Model)</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/cnLgS1O7q6o/beginners-guide-building-an-online-retail-web-shop-workshop-domain-model.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-beginners_guide_building_an_online_retail_web_shop_workshop_domain_model</id><updated>2019-07-08T07:45:59Z</updated><published>2019-07-08T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab01.html" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="beginners guide red hat decision manager" border="0" data-original-height="843" data-original-width="1600" height="168" src="https://1.bp.blogspot.com/-cR3PsiJzOsk/XQuCt-IFI6I/AAAAAAAAvKM/NeGXvos8ok845AeXO5Dv-7LHFOwkWBOUgCLcBGAs/s320/Screenshot%2B2019-06-20%2Bat%2B14.49.30.png" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop.&lt;br /&gt;&lt;br /&gt;The previous article covered &lt;a href="https://www.schabell.org/2019/06/beginners-guide-building-an-online-retail-web-shop-workshop.html" target="_blank"&gt;installing the tooling and setting up a project&lt;/a&gt;. This update is the for the third lab in this workshop, with more to follow. Learn how to&amp;nbsp;create a domain model with Red Hat Decision Manager.&lt;br /&gt;&lt;br /&gt;Below you'll find the embedded lab slides with all the instructions and links to needed software components for Unix and Windows based machines.&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;h3 style="text-align: left;"&gt;Create a domain model&lt;/h3&gt;In&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/lab03.html#/" target="_blank"&gt;lab 3 get hands-on creating&amp;nbsp;a domain model&lt;/a&gt;&amp;nbsp;in Red Hat Decision Manager:&lt;br /&gt;&lt;br /&gt;&lt;div align="center"&gt;&lt;iframe allowfullscreen="" frameborder="0" height="380" marginheight="0" marginwidth="0" scrolling="no" src="https://bpmworkshop.gitlab.io/rhdm/lab03.html#/" style="border-width: 1px; border: 1px solid #ccc; margin-bottom: 5px; max-width: 100%;" width="660"&gt;&lt;/iframe&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;Next up in this workshop, create a domain specific model (DSL).&lt;br /&gt;&lt;br /&gt;For more beginners guide workshops &lt;a href="https://bpmworkshop.gitlab.io/#/" target="_blank"&gt;please explore here&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=5Ev-oUM6hdI:fwbafl_hnPE:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=5Ev-oUM6hdI:fwbafl_hnPE:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=5Ev-oUM6hdI:fwbafl_hnPE:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=5Ev-oUM6hdI:fwbafl_hnPE:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=5Ev-oUM6hdI:fwbafl_hnPE:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/5Ev-oUM6hdI" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/cnLgS1O7q6o" height="1" width="1" alt=""/&gt;</content><summary>With the release of Red Hat Decision Manager 7.3 I've started updating my free online workshop, a beginners guide to building an online retail web shop. The previous article covered installing the tooling and setting up a project. This update is the for the third lab in this workshop, with more to follow. Learn how to create a domain model with Red Hat Decision Manager. Below you'll find the embed...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-08T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/5Ev-oUM6hdI/beginners-guide-building-an-online-retail-web-shop-workshop-domain-model.html</feedburner:origLink></entry><entry><title>How to store large amounts of data in a program</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/w7xCT3UkWik/" /><category term="Big Data" scheme="searchisko:content:tags" /><category term="data" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="performance" scheme="searchisko:content:tags" /><author><name>Nick Clifton</name></author><id>searchisko:content:id:jbossorg_blog-how_to_store_large_amounts_of_data_in_a_program</id><updated>2019-07-05T07:00:55Z</updated><published>2019-07-05T07:00:55Z</published><content type="html">&lt;p&gt;Most programs need data in order to work. Sometimes this data is provided to the program when it runs, and sometimes the data is built into the program. In this article, I&amp;#8217;ll explain how to store large amounts of data inside a program so that it is there when the program runs.&lt;br /&gt; &lt;span id="more-607297"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;The most obvious method of storing data is to include it in the program&amp;#8217;s source code. For example, in C:&lt;/p&gt; &lt;pre&gt;int a = 1;&lt;/pre&gt; &lt;p&gt;This approach works for small amounts of data, but it quickly becomes cumbersome as the amount of data to be stored increases.  Additionally, if the data is going to be stored in this way, it&amp;#8217;s often necessary to create a tool that will convert the data into a form that is acceptable to the programming language used.&lt;/p&gt; &lt;p&gt;The next choice would be to load the data at run-time. This works, but it has problems, too. For example, it presumes the existence of a filesystem that can be used to store the data file(s). It also means that the program is no longer a single entity but now has to be shipped with these data files.  And, extra code needs to be written to handle situations where the files are missing or corrupt.&lt;/p&gt; &lt;p&gt;So, this article presents a method for including large data files into the body of an executable program. The article is written with ELF-based GNU/Linux systems in mind. Other operating systems may have other methods for solving this problem. In particular, it is worth noting that Windows supports the concept of &amp;#8220;resources&amp;#8221; [1] for programs, which provide read-only access to various types of embedded data.&lt;/p&gt; &lt;h2&gt;The INCBIN directive&lt;/h2&gt; &lt;p&gt;The method is to make use of an assembler source file, or even inline assembler, and the special assembler pseudo-op called &lt;code&gt;.incbin&lt;/code&gt; [2]. This directive allows an arbitrary file to be included in the program at the specified location. For example:&lt;/p&gt; &lt;pre&gt;.incbin "foo.jpg"&lt;/pre&gt; &lt;p&gt;In practice, it is best to make sure that the data is located in the correct section and that it is aligned correctly. Additionally, symbols will probably be needed to provide access to the data from the high-level source code:&lt;/p&gt; &lt;pre&gt;.data .align 4 .global start_of_foo start_of_foo: .incbin "foo.jpg" .global end_of_foo end_of_foo:&lt;/pre&gt; &lt;p&gt;This could then be accessed in a C source file like this:&lt;/p&gt; &lt;pre&gt;extern char start_of_foo; extern char end_of_foo; char * p; for (p = &amp;#38; start_of_foo; p &amp;#60; &amp;#38; end_of_foo; p++) ...&lt;/pre&gt; &lt;p&gt;Note that the use of the address operators (&amp;#38;) and the absence of pointer types (char *) in the above code fragment is correct. This is because of the difference between assembler created symbols and compiler-generated symbols [3]. When an assembler creates a symbol, all it really does is to provide a label that corresponds to a given address. Whereas when a compiler creates a symbol, it creates a space in the program&amp;#8217;s data, installs a value into that space, and then uses the symbol as an indirect reference to that value.&lt;/p&gt; &lt;p&gt;The C language does allow symbols to be treated as labels; however, they must be declared as unsized arrays instead:&lt;/p&gt; &lt;pre&gt;extern char start_of_foo[]; extern char end_of_foo[]; char * p; for (p = start_of_foo; p &amp;#60; end_of_foo; p++) ...&lt;/pre&gt; &lt;p&gt;The assembler code puts the contents of &lt;code&gt;foo.jpg&lt;/code&gt; into the program&amp;#8217;s data section, which means that it can be written to as well as read. If the data needs to be read-only, then it should be placed into the &lt;code&gt;.rodata&lt;/code&gt; section instead, like this:&lt;/p&gt; &lt;pre&gt;.section .rodata [...] .incbin "foo.jpg" [...]&lt;/pre&gt; &lt;p&gt;In fact, it may be desirable to place the data into a section all of its own so that it can be easily located in the resulting executable. The .section directive allows new sections to be created so the following could be used:&lt;/p&gt; &lt;pre&gt;.section foo-image, "a" @progbits&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;"a"&lt;/code&gt; indicates that space should be allocated for the section in the run-time memory image of the program. By default this data is read-only, so if it needs to be writeable, you would add the &lt;code&gt;w&lt;/code&gt; flag (i.e., &lt;code&gt;"aw"&lt;/code&gt;). The &lt;code&gt;@progbits&lt;/code&gt; indicates that the section only contains data, nothing else.&lt;/p&gt; &lt;p&gt;Another thing to consider with this method is that it changes the current section, which could cause problems if the assembler is inlined into a higher level source code. In this case the &lt;code&gt;.pushsection&lt;/code&gt; and &lt;code&gt;.popsection&lt;/code&gt; pseudo-ops can be used to safely change the section, like this:&lt;/p&gt; &lt;pre&gt;__asm__("\n\ .pushsection .foo-image, \"a\", @progbits\n\ .align 4\n\ .global start_of_foo\n\ start_of_foo:\n\ .incbin \"foo.jpg\"\n\ .global end_of_foo\n\ end_of_foo:\n\ .popsection\n"); &lt;/pre&gt; &lt;p&gt;Putting the data into a section of its own also has an additional benefit. As long as the section name is a valid C identifier (meaning &lt;code&gt;foo_image&lt;/code&gt; is OK, but &lt;code&gt;foo-image&lt;/code&gt; is not), then the linker will automatically create beginning and end symbols for it. So, it&amp;#8217;s not necessary to declare them in the assembler code. Hence the following program will print out the size and contents of a file called &lt;code&gt;foo.jpg&lt;/code&gt;, with foo.jpg being embedded into the executable:&lt;/p&gt; &lt;pre&gt;int main (void) { extern const char __start_foo_image[]; extern const char __stop_foo_image[]; const char * p; __asm__("\n\ .pushsection foo_image, \"a\", @progbits\n\ .incbin \"foo.jpg\"\n\ .popsection\n"); printf ("image size: %#lx\n", __stop_foo_image - __start_foo_image); for (p = __start_foo_image; p &amp;#60; __stop_foo_image; p++) printf ("%d ", *p); printf ("\n"); return 0; }&lt;/pre&gt; &lt;h2&gt;Modifying the in-program data&lt;/h2&gt; &lt;p&gt;One problem with storing data inside an executable is that it is then difficult to modify the data. Recompilation is always an option, but there is another option. The &lt;code&gt;objcopy&lt;/code&gt; program allows the contents of sections in a program to be changed. Note, however, that it does not allow editing of individual bytes within a section, only the wholesale replacement of the contents of a section. Thus, this method only works if the data has been placed into a section of its own.&lt;/p&gt; &lt;p&gt;The command [4] looks like this:&lt;/p&gt; &lt;pre&gt;objcopy --update-section sectionname=filename &amp;#60;file&amp;#62;&lt;/pre&gt; &lt;p&gt;So, given the examples above this command:&lt;/p&gt; &lt;pre&gt;objcopy --update-section foo_image="bar.jpg" a.out&lt;/pre&gt; &lt;p&gt;will replace the foo.jpg image inside a.out with the bar.jpg image.&lt;/p&gt; &lt;p&gt;This method does have a major flaw, however; the replacement does not change the symbols generated by the assembler or the linker, and the compiled code will still use the old values. So, if the new file is of a different size to the old file then the stop/end symbol will be incorrect. The start symbol will still be OK, because its value is relative to the start of the foo_image section, which is always zero. Thus, the moral to this story is that, unless the data is self-describing, do not replace it with anything other than an equal-sized block.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;It is possible to store large data sets inside a program, using a little bit of assembler hackery. Putting the data into its own section makes it easier to examine and, if necessary, alter. This approach does make the program bigger, of course, but depending upon the circumstances it may still be better than storing the data outside of the program.&lt;/p&gt; &lt;h3&gt;References&lt;/h3&gt; &lt;p&gt;[1] &lt;a href="https://en.wikipedia.org/wiki/Resource_(Windows)"&gt;https://en.wikipedia.org/wiki/Resource_(Windows)&lt;/a&gt;&lt;br /&gt; [2] &lt;a href="https://sourceware.org/binutils/docs-2.32/as/Incbin.html#Incbin"&gt;https://sourceware.org/binutils/docs-2.32/as/Incbin.html#Incbin&lt;/a&gt;&lt;br /&gt; [3] &lt;a href="https://sourceware.org/binutils/docs-2.32/ld/Source-Code-Reference.html#Source-Code-Reference"&gt;https://sourceware.org/binutils/docs-2.32/ld/Source-Code-Reference.html#Source-Code-Reference&lt;/a&gt;&lt;br /&gt; [4] &lt;a href="https://sourceware.org/binutils/docs-2.32/binutils/objcopy.html#objcopy"&gt;https://sourceware.org/binutils/docs-2.32/binutils/objcopy.html#objcopy&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#38;linkname=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F05%2Fhow-to-store-large-amounts-of-data-in-a-program%2F&amp;#038;title=How%20to%20store%20large%20amounts%20of%20data%20in%20a%20program" data-a2a-url="https://developers.redhat.com/blog/2019/07/05/how-to-store-large-amounts-of-data-in-a-program/" data-a2a-title="How to store large amounts of data in a program"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/05/how-to-store-large-amounts-of-data-in-a-program/"&gt;How to store large amounts of data in a program&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/w7xCT3UkWik" height="1" width="1" alt=""/&gt;</content><summary>Most programs need data in order to work. Sometimes this data is provided to the program when it runs, and sometimes the data is built into the program. In this article, I’ll explain how to store large amounts of data inside a program so that it is there when the program runs. The most obvious method of storing data is to include it in the program’s source code. For example, in C: int a = 1; This ...</summary><dc:creator>Nick Clifton</dc:creator><dc:date>2019-07-05T07:00:55Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/05/how-to-store-large-amounts-of-data-in-a-program/</feedburner:origLink></entry><entry><title>Announcing Red Hat AMQ streams 1.2 with Apache Kafka 2.2 support</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ddl8TaiwZh8/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="OpenShift Enterprise by Red Hat" scheme="searchisko:content:tags" /><category term="Red Hat AMQ Streams" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><category term="Red Hat OpenShift Container Platform" scheme="searchisko:content:tags" /><author><name>Hugo Guerrero</name></author><id>searchisko:content:id:jbossorg_blog-announcing_red_hat_amq_streams_1_2_with_apache_kafka_2_2_support</id><updated>2019-07-04T07:00:24Z</updated><published>2019-07-04T07:00:24Z</published><content type="html">&lt;p&gt;We are thrilled to announce an updated release of the data streaming component of our messaging suite, Red Hat AMQ streams 1.2, which is part of &lt;a href="https://www.redhat.com/en/products/integration"&gt;Red Hat integration&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Red Hat AMQ streams, based on the &lt;a href="https://www.redhat.com/en/topics/integration/what-is-apache-kafka"&gt;Apache Kafka&lt;/a&gt; project, offers a distributed backbone that allows microservices and other applications to share data with extremely high throughput and extremely low latency. AMQ streams makes running and managing Apache Kafka a Kubernetes-native experience, by additionally delivering &lt;a href="https://developers.redhat.com/products/openshift/overview"&gt;Red Hat OpenShift&lt;/a&gt; Operators, a simplified and automated way to deploy, manage, upgrade and configure a Kafka ecosystem installation on Kubernetes.&lt;span id="more-609877"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Features&lt;/h2&gt; &lt;p&gt;This new release adds two main features:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Support for Apache Kafka 2.2.1&lt;/li&gt; &lt;li&gt;Support for Red Hat OpenShift Container Platform 4.1&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;AMQ streams can now be installed on OpenShift 4.x manually using YAML files or through the OpenShift Container Platform Operator Hub. Also, the YAML files describing the CRDs provided with AMQ streams now support multiple versions. Additionally, it is now possible to add or remove volumes from JBOD storage and you can now increase the size of the persistent volumes used for the storage of messages and logs in an existing AMQ streams cluster. To simplify the deployment, the number of container images for AMQ streams has been significantly reduced.&lt;/p&gt; &lt;p&gt;Together with the above new features, this release includes breakthrough previews:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;AMQ streams HTTP bridge&lt;/li&gt; &lt;li&gt;Debezium Change Data Capture (CDC) connectors&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;CDC connectors are based on the upstream project &lt;a href="https://debezium.io/"&gt;Debezium&lt;/a&gt; and are being made available to work with Red Hat AMQ Streams. When running in a container, Debezium captures row-level changes to a database table and passes corresponding change events to AMQ streams on OpenShift Container Platform for further processing.&lt;/p&gt; &lt;h2&gt;AMQ streams HTTP bridge&lt;/h2&gt; &lt;p&gt;The AMQ streams HTTP bridge provides a RESTful interface to AMQ streams, offering the advantages of a web API that is easy to use and connect with AMQ streams without the need to interpret the Kafka protocol.&lt;/p&gt; &lt;p&gt;The HTTP Bridge supports HTTP producer and consumer requests to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Produce records&lt;/li&gt; &lt;li&gt;Consume records&lt;/li&gt; &lt;li&gt;Create consumers&lt;/li&gt; &lt;li&gt;Delete consumers&lt;/li&gt; &lt;li&gt;Retrieve data from topics and partitions&lt;/li&gt; &lt;li&gt;Commit offsets to partitions and topics&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The methods provide JSON responses and HTTP response code error handling.&lt;/p&gt; &lt;h2&gt;Red Hat Integration&lt;/h2&gt; &lt;p&gt;AMQ streams 1.2 is available today as part of the &lt;a href="https://www.redhat.com/en/products/integration"&gt;Red Hat integration product&lt;/a&gt;. For customers embracing a cloud-native development model, Red Hat offers a full portfolio of technologies that enable them to &lt;a href="https://www.redhat.com/en/technologies/cloud-computing/openshift/application-runtimes"&gt; build microservices-based applications&lt;/a&gt; &lt;a href="https://www.redhat.com/en/topics/integration/what-is-integration"&gt;,&lt;/a&gt;&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/amq"&gt; exchange information synchronously or asynchronously&lt;/a&gt;&lt;a href="https://www.redhat.com/en/topics/integration/what-is-integration"&gt; between them,&lt;/a&gt;&lt;a href="https://www.redhat.com/en/technologies/jboss-middleware/fuse"&gt; integrate them with legacy systems&lt;/a&gt;&lt;a href="https://www.redhat.com/en/topics/integration/what-is-integration"&gt;, and run them on an&lt;/a&gt;&lt;a href="https://www.openshift.com/"&gt; industry-leading enterprise container and Kubernetes application platform&lt;/a&gt;&lt;a href="https://www.redhat.com/en/topics/integration/what-is-integration"&gt;.&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#38;linkname=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F04%2Fannouncing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support%2F&amp;#038;title=Announcing%20Red%20Hat%20AMQ%20streams%201.2%20with%20Apache%20Kafka%202.2%20support" data-a2a-url="https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/" data-a2a-title="Announcing Red Hat AMQ streams 1.2 with Apache Kafka 2.2 support"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/"&gt;Announcing Red Hat AMQ streams 1.2 with Apache Kafka 2.2 support&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ddl8TaiwZh8" height="1" width="1" alt=""/&gt;</content><summary>We are thrilled to announce an updated release of the data streaming component of our messaging suite, Red Hat AMQ streams 1.2, which is part of Red Hat integration. Red Hat AMQ streams, based on the Apache Kafka project, offers a distributed backbone that allows microservices and other applications to share data with extremely high throughput and extremely low latency. AMQ streams makes running a...</summary><dc:creator>Hugo Guerrero</dc:creator><dc:date>2019-07-04T07:00:24Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/04/announcing-red-hat-amq-streams-1-2-with-apache-kafka-2-2-support/</feedburner:origLink></entry><entry><title>Compiling JGroups to native code with Quarkus/GraalVM</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/zii9-47XVJI/compiling-jgroups-to-native-code-with.html" /><category term="feed_group_name_jgroups" scheme="searchisko:content:tags" /><category term="feed_name_belasblog" scheme="searchisko:content:tags" /><category term="quarkus graalvm native code" scheme="searchisko:content:tags" /><author><name>Bela Ban</name></author><id>searchisko:content:id:jbossorg_blog-compiling_jgroups_to_native_code_with_quarkus_graalvm</id><updated>2019-07-03T13:13:39Z</updated><published>2019-07-03T13:13:00Z</published><content type="html">I'm happy to announce the availability of a JGroups extension for &lt;a href="https://quarkus.io/"&gt;Quarkus&lt;/a&gt;!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;What?&lt;/h3&gt;&lt;br /&gt;Quarkus is a framework that (among other things) compiles Java code down to native code (using GraalVM [4]), removing code that's not needed at run time.&lt;br /&gt;&lt;br /&gt;Quarkus analyzes the code in a &lt;i&gt;build phase&lt;/i&gt;, and removes code that's not used at run time, in order to have a small executable that starts up quickly.&lt;br /&gt;&lt;br /&gt;This means that reflection cannot be used at &lt;i&gt;run time&lt;/i&gt;, as all classes that are not used are removed at build time. However, reflection can be used at &lt;i&gt;build time&lt;/i&gt;.&lt;br /&gt;&lt;br /&gt;The other limitations that affect JGroups are threads and the creation of sockets. Both cannot be done at build time, but have to be done at run time. (More limitations of JGroups under Quarkus are detailed in [5]).&lt;br /&gt;&lt;br /&gt;So what's the point of a providing a JGroups extension for Quarkus?&lt;br /&gt;&lt;br /&gt;While a JGroups application &lt;i&gt;can&lt;/i&gt; be compiled directly to native code (using GraalVM's &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;native-image&lt;/span&gt;), it is cumbersome, and the application has to be restructured (see [6] for an example) to accommodate the limitations of native compilation.&lt;br /&gt;&lt;br /&gt;In contrast, the JGroups extension provides a JChannel that can be injected into the application. The channel has been created according to a configuration file and connected (= joined the cluster) by the extension. The extension takes care of doing the reflection, the socket creation and the starting of threads at the right time (build- or run-time), and the user doesn't need to worry about this.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;How?&lt;/h3&gt;So let's take a look at a sample application (available at [2]).&lt;br /&gt;&lt;br /&gt;The POM includes the extension: &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;groupId=org.jgroups.quarkus.extension&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;artifactId=quarkus-jgroups&lt;/span&gt;. This provides a JChannel that can be injected. The main class is &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;ChatResource&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: olive;"&gt;@ApplicationScoped&lt;/span&gt;&lt;span style="color: olive;"&gt;&amp;nbsp;&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: olive;"&gt;@Path&lt;/span&gt;(&lt;span style="color: green; font-weight: bold;"&gt;"/chat"&lt;/span&gt;)&lt;br /&gt;&lt;span style="color: navy; font-weight: bold;"&gt;public class &lt;/span&gt;ChatResource &lt;span style="color: navy; font-weight: bold;"&gt;extends &lt;/span&gt;ReceiverAdapter &lt;span style="color: navy; font-weight: bold;"&gt;implements &lt;/span&gt;Publisher&amp;lt;String&amp;gt; {&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;protected final &lt;/span&gt;Set&amp;lt;Subscriber&amp;lt;? &lt;span style="color: navy; font-weight: bold;"&gt;super &lt;/span&gt;String&amp;gt;&amp;gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;subscribers&lt;/span&gt;=&lt;span style="color: navy; font-weight: bold;"&gt;new &lt;/span&gt;HashSet&amp;lt;&amp;gt;();&lt;br /&gt;&lt;br /&gt; &lt;span style="color: olive;"&gt;@Inject &lt;/span&gt;JChannel &lt;span style="color: #660e7a; font-weight: bold;"&gt;channel&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;protected void &lt;/span&gt;init(&lt;span style="color: olive;"&gt;@Observes &lt;/span&gt;StartupEvent evt) &lt;span style="color: navy; font-weight: bold;"&gt;throws &lt;/span&gt;Exception {&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;channel&lt;/span&gt;.setReceiver(&lt;span style="color: navy; font-weight: bold;"&gt;this&lt;/span&gt;);&lt;br /&gt; System.&lt;span style="color: #660e7a; font-style: italic;"&gt;out&lt;/span&gt;.printf(&lt;span style="color: green; font-weight: bold;"&gt;"-- view: %s&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\n&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt;"&lt;/span&gt;, &lt;span style="color: #660e7a; font-weight: bold;"&gt;channel&lt;/span&gt;.getView());&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;protected void &lt;/span&gt;destroy(&lt;span style="color: olive;"&gt;@Observes &lt;/span&gt;ShutdownEvent evt) {&lt;br /&gt; Util.&lt;span style="font-style: italic;"&gt;close&lt;/span&gt;(&lt;span style="color: #660e7a; font-weight: bold;"&gt;channel&lt;/span&gt;);&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;subscribers&lt;/span&gt;.forEach(Subscriber::onComplete);&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;subscribers&lt;/span&gt;.clear();&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: olive;"&gt;@GET&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: olive;"&gt; @Produces&lt;/span&gt;(MediaType.&lt;span style="color: #660e7a; font-style: italic;"&gt;TEXT_PLAIN&lt;/span&gt;)&lt;br /&gt; &lt;span style="color: olive;"&gt;@Path&lt;/span&gt;(&lt;span style="color: green; font-weight: bold;"&gt;"/send/{msg}"&lt;/span&gt;)&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public &lt;/span&gt;String sendMessage(&lt;span style="color: olive;"&gt;@PathParam&lt;/span&gt;(&lt;span style="color: green; font-weight: bold;"&gt;"msg"&lt;/span&gt;) String msg) &lt;span style="color: navy; font-weight: bold;"&gt;throws &lt;/span&gt;Exception {&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;channel&lt;/span&gt;.send(&lt;span style="color: navy; font-weight: bold;"&gt;null&lt;/span&gt;, Objects.&lt;span style="font-style: italic;"&gt;requireNonNull&lt;/span&gt;(msg).getBytes());&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;return &lt;/span&gt;String.&lt;span style="font-style: italic;"&gt;format&lt;/span&gt;(&lt;span style="color: green; font-weight: bold;"&gt;"message &lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\"&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt;%s&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\"&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt; was sent on channel &lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\n&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt;"&lt;/span&gt;, msg);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: olive;"&gt;@GET&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: olive;"&gt; @Produces&lt;/span&gt;(MediaType.&lt;span style="color: #660e7a; font-style: italic;"&gt;SERVER_SENT_EVENTS&lt;/span&gt;)&lt;br /&gt; &lt;span style="color: olive;"&gt;@Path&lt;/span&gt;(&lt;span style="color: green; font-weight: bold;"&gt;"/subscribe"&lt;/span&gt;)&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public &lt;/span&gt;Publisher&amp;lt;String&amp;gt; greeting() {&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;return this&lt;/span&gt;;&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public void &lt;/span&gt;receive(Message msg) {&lt;br /&gt; onNext(msg);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public void &lt;/span&gt;receive(MessageBatch batch) {&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;for&lt;/span&gt;(Message msg: batch)&lt;br /&gt; onNext(msg);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public void &lt;/span&gt;viewAccepted(View view) {&lt;br /&gt; System.&lt;span style="color: #660e7a; font-style: italic;"&gt;out&lt;/span&gt;.printf(&lt;span style="color: green; font-weight: bold;"&gt;"-- new view: %s&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\n&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt;"&lt;/span&gt;, view);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;public void &lt;/span&gt;subscribe(Subscriber&amp;lt;? &lt;span style="color: navy; font-weight: bold;"&gt;super &lt;/span&gt;String&amp;gt; s) {&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;if&lt;/span&gt;(s != &lt;span style="color: navy; font-weight: bold;"&gt;null&lt;/span&gt;)&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;subscribers&lt;/span&gt;.add(s);&lt;br /&gt; }&lt;br /&gt;&lt;br /&gt; &lt;span style="color: navy; font-weight: bold;"&gt;protected void &lt;/span&gt;onNext(Message msg) {&lt;br /&gt; String s=&lt;span style="color: navy; font-weight: bold;"&gt;new &lt;/span&gt;String(msg.getRawBuffer(), msg.getOffset(), msg.getLength());&lt;br /&gt; System.&lt;span style="color: #660e7a; font-style: italic;"&gt;out&lt;/span&gt;.printf(&lt;span style="color: green; font-weight: bold;"&gt;"-- from %s: %s&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;\n&lt;/span&gt;&lt;span style="color: green; font-weight: bold;"&gt;"&lt;/span&gt;, msg.src(), s);&lt;br /&gt; &lt;span style="color: #660e7a; font-weight: bold;"&gt;subscribers&lt;/span&gt;.forEach(sub -&amp;gt; sub.onNext(&lt;span style="color: #660e7a;"&gt;s&lt;/span&gt;));&lt;br /&gt; }&lt;br /&gt;}&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&amp;nbsp;&lt;/pre&gt;It has a JChannel &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;channel&lt;/span&gt; which is injected by Arc (the dependency mechanism used in Quarkus). This channel is fully created and connected when it is injected.&lt;br /&gt;&lt;br /&gt;The &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;receive(Message)&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;receive(MessageBatch)&lt;/span&gt; methods receive messages sent by itself or other members in the cluster. It in turn publishes them via the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;Publisher&lt;/span&gt; interface. All subscribers will therefore receive all messages sent in the cluster.&lt;br /&gt;&lt;br /&gt;The &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;sendMessage()&lt;/span&gt; method is invoked when a URL of the form &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;http://localhost:8080/chat/send/mymessage&lt;/span&gt; is received. It takes the string parameter ("&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mymessage&lt;/span&gt;") and uses the injected &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;channel&lt;/span&gt; to send it to all members of the cluster.&lt;br /&gt;&lt;br /&gt;The URL &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;http://localhost:8080/chat/subscribe&lt;/span&gt; (or &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;http://localhost:8080/streaming.html &lt;/span&gt;in a web browser) can be used to subscribe to messages being received by the channel.&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Demo&lt;/h3&gt;Let's now run a cluster of 2 instances: open 2 shells and type the following commands (output has been edited for brevity):&lt;br /&gt;&lt;br /&gt;Shell1:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat$ mvn compile quarkus:dev &lt;br /&gt;...&lt;br /&gt;[INFO] --- quarkus-maven-plugin:0.18.0:dev (default-cli) @ quarkus-jgroups-chat ---&lt;br /&gt;2019-07-03 14:12:05,025 DEBUG [org.jgr.qua.ext.JChannelTemplate] (main) creating channel based on config config=chat-tcp.xml, bind_addr=, initial_hosts=, cluster=quarkus-jgroups-chat&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&amp;nbsp;&lt;/span&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;GMS: address=belasmac-19612, cluster=quarkus-jgroups-chat, physical address=127.0.0.1:7800&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;-- view: [belasmac-19612|0] (1) [belasmac-19612]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Shell2:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat$ mvn compile quarkus:dev -Dquarkus.http.port=8081&lt;br /&gt;...&lt;br /&gt;[INFO] --- quarkus-maven-plugin:0.18.0:dev (default-cli) @ quarkus-jgroups-chat ---&lt;br /&gt;2019-07-03 14:15:02,463 DEBUG [org.jgr.qua.ext.JChannelTemplate] (main) creating channel based on config config=chat-tcp.xml, bind_addr=, initial_hosts=, cluster=quarkus-jgroups-chat&lt;br /&gt;&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;GMS: address=belasmac-25898, cluster=quarkus-jgroups-chat, physical address=127.0.0.1:7801&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;-- view: [belasmac-19612|1] (2) [belasmac-19612, belasmac-25898]&lt;/span&gt;&lt;br /&gt;The system property &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;quarkus.http.port=8081&lt;/span&gt; is needed, or else there would be a port collision, as the default port of &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;8080&lt;/span&gt; has already been taken by the first application (both apps are started on the same host).&lt;br /&gt;&lt;br /&gt;The output shows that there's a cluster of 2 members.&lt;br /&gt;&lt;br /&gt;We can now post a message by invoking &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;curl http://localhost:8080/chat/send/hello%20world&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;curl http://localhost:8081/chat/send/message2.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;"&gt;Both shells show that they received both messages:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;-- view: [belasmac-19612|1] (2) [belasmac-19612, belasmac-25898]&lt;br /&gt;-- from belasmac-19612: hello world&lt;br /&gt;-- from belasmac-25898: message2&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;"&gt;Of course, we could also use a web browser to send the HTTP GET requests.&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;"&gt;When subscribing to the stream of messages in a web browser (&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;http://localhost:8081/streaming.html&lt;/span&gt;), this would look as follows:&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;&lt;span style="font-family: &amp;quot;arial&amp;quot; , &amp;quot;helvetica&amp;quot; , sans-serif;"&gt;&amp;nbsp;&lt;/span&gt; &lt;/span&gt;&lt;br /&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="https://1.bp.blogspot.com/-mxl2Q6_Abw8/XRygSMjF3HI/AAAAAAABPlo/njk_SHVjjK0N6APrvDQot5x2x5iiVh50QCLcBGAs/s1600/Screenshot%2B2019-07-03%2Bat%2B14.31.31.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" data-original-height="863" data-original-width="854" height="400" src="https://1.bp.blogspot.com/-mxl2Q6_Abw8/XRygSMjF3HI/AAAAAAABPlo/njk_SHVjjK0N6APrvDQot5x2x5iiVh50QCLcBGAs/s400/Screenshot%2B2019-07-03%2Bat%2B14.31.31.png" width="395" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Note that both channels bind to the loopback (&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;127.0.0.1&lt;/span&gt;) address. This can be changed by changing &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bind_addr &lt;/span&gt;and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;initial_hosts&lt;/span&gt; in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;application.properties&lt;/span&gt;:&lt;br /&gt;&lt;br /&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: navy; font-weight: bold;"&gt;quarkus.channel.config&lt;/span&gt;=&lt;span style="color: green; font-weight: bold;"&gt;chat-tcp.xml&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: green; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;quarkus.channel.cluster&lt;/span&gt;=&lt;span style="color: green; font-weight: bold;"&gt;quarkus-jgroups-chat&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: green; font-weight: bold;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: grey; font-style: italic;"&gt;# quarkus.channel.bind_addr=192.168.1.105&lt;/span&gt;&lt;/pre&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="color: grey; font-style: italic;"&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style="color: grey; font-style: italic;"&gt;# quarkus.channel.initial_hosts=192.168.1.105[7800]&lt;/span&gt;&lt;span style="color: grey; font-style: italic;"&gt;&lt;/span&gt;&lt;span style="color: navy; font-weight: bold;"&gt;&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;Uncomment the 2 properties and set them accordingly.&lt;br /&gt;&lt;br /&gt;Alternatively, we can pass these as system properties, e.g.:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat$ mvn compile quarkus:dev -Dbind_addr=192.168.1.105 -Dinitial_hosts=192.168.1.105[7800],192.168.1.105[7801]&lt;br /&gt;...&lt;br /&gt;[INFO] --- quarkus-maven-plugin:0.18.0:dev (default-cli) @ quarkus-jgroups-chat ---&lt;br /&gt;2019-07-03 14:38:28,258 DEBUG [org.jgr.qua.ext.JChannelTemplate] (main) creating channel based on config config=chat-tcp.xml, bind_addr=, initial_hosts=, cluster=quarkus-jgroups-chat&lt;br /&gt;&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;GMS: address=belasmac-10738, cluster=quarkus-jgroups-chat, physical address=192.168.1.105:7800&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;-- view: [belasmac-10738|0] (1) [belasmac-10738]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Native compilation&lt;/h3&gt;To compile the application to native code, the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;mvn package -Pnative&lt;/span&gt; command has to be executed:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat$ mvn package -Pnative&lt;br /&gt;[INFO] Building jar: /Users/bela/quarkus-jgroups-chat/target/quarkus-jgroups-chat-1.0.0-SNAPSHOT.jar&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] --- quarkus-maven-plugin:0.18.0:build (default) @ quarkus-jgroups-chat ---&lt;br /&gt;[INFO] [io.quarkus.deployment.QuarkusAugmentor] Beginning quarkus augmentation&lt;br /&gt;[INFO] [org.jboss.threads] JBoss Threads version 3.0.0.Beta4&lt;br /&gt;[INFO] [io.quarkus.deployment.QuarkusAugmentor] Quarkus augmentation completed in 1343ms&lt;br /&gt;[INFO] [io.quarkus.creator.phase.runnerjar.RunnerJarPhase] Building jar: /Users/bela/quarkus-jgroups-chat/target/quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner.jar&lt;br /&gt;[INFO] &lt;br /&gt;[INFO] --- quarkus-maven-plugin:0.18.0:native-image (default) @ quarkus-jgroups-chat ---&lt;br /&gt;[INFO] [io.quarkus.creator.phase.nativeimage.NativeImagePhase] Running Quarkus native-image plugin on OpenJDK 64-Bit Server VM&lt;br /&gt;[INFO] [io.quarkus.creator.phase.nativeimage.NativeImagePhase] /Users/bela/graalvm/Contents/Home/bin/native-image -J-Djava.util.logging.manager=org.jboss.logmanager.LogManager --initialize-at-build-time= -H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge.CollectionPolicy$BySpaceAndTime -jar quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner.jar -J-Djava.util.concurrent.ForkJoinPool.common.parallelism=1 -H:FallbackThreshold=0 -H:+ReportUnsupportedElementsAtRuntime -H:+ReportExceptionStackTraces -H:+PrintAnalysisCallTree -H:-AddAllCharsets -H:EnableURLProtocols=http -H:-SpawnIsolates -H:+JNI --no-server -H:-UseServiceLoaderFeature -H:+StackTrace&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp; classlist:&amp;nbsp;&amp;nbsp; 6,857.25 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (cap):&amp;nbsp;&amp;nbsp; 4,290.72 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; setup:&amp;nbsp;&amp;nbsp; 6,430.30 ms&lt;br /&gt;14:43:05,540 INFO&amp;nbsp; [org.jbo.threads] JBoss Threads version 3.0.0.Beta4&lt;br /&gt;14:43:06,468 INFO&amp;nbsp; [org.xnio] XNIO version 3.7.2.Final&lt;br /&gt;14:43:06,528 INFO&amp;nbsp; [org.xni.nio] XNIO NIO Implementation Version 3.7.2.Final&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp; (typeflow):&amp;nbsp; 17,331.26 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp; (objects):&amp;nbsp; 24,511.12 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp; (features):&amp;nbsp;&amp;nbsp; 1,194.16 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; analysis:&amp;nbsp; 44,204.65 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (clinit):&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; 579.00 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; universe:&amp;nbsp;&amp;nbsp; 1,715.40 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (parse):&amp;nbsp;&amp;nbsp; 3,315.80 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (inline):&amp;nbsp;&amp;nbsp; 4,563.11 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp; (compile):&amp;nbsp; 24,906.58 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; compile:&amp;nbsp; 34,907.28 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; image:&amp;nbsp;&amp;nbsp; 4,557.78 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; write:&amp;nbsp;&amp;nbsp; 2,531.16 ms&lt;br /&gt;[quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner:93574]&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; [total]: 109,858.54 ms&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] BUILD SUCCESS&lt;br /&gt;[INFO] ------------------------------------------------------------------------&lt;br /&gt;[INFO] Total time:&amp;nbsp; 01:58 min&lt;br /&gt;[INFO] Finished at: 2019-07-03T14:44:40+02:00&lt;br /&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This uses GraalVM's &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;native-image&lt;/span&gt; to generate a native executable. After a while, the resulting executable is in the &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;./target &lt;/span&gt;directory:&lt;br /&gt;&lt;br /&gt;It's size is only 27MB and we can see that it is a MacOS native executable:&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat/target$ ls -lh quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner&lt;br /&gt;-rwxr-xr-x&amp;nbsp; 1 bela&amp;nbsp; staff&amp;nbsp;&amp;nbsp;&amp;nbsp; 27M Jul&amp;nbsp; 3 14:44 quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner&lt;br /&gt;[belasmac] /Users/bela/quarkus-jgroups-chat/target$ file quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner&lt;br /&gt;quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner: Mach-O 64-bit executable x86_64 &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;To run it:&lt;br /&gt;&lt;br /&gt;&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;[belasmac] /Users/bela/quarkus-jgroups-chat/target$ ./quarkus-jgroups-chat-1.0.0-SNAPSHOT-runner &lt;br /&gt;&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;GMS: address=belasmac-55106, cluster=quarkus-jgroups-chat, physical address=127.0.0.1:7800&lt;br /&gt;-------------------------------------------------------------------&lt;br /&gt;-- view: [belasmac-55106|0] (1) [belasmac-55106]&lt;br /&gt;&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;When you run this yourself, you will notice that quick startup time of the second and subsequent members. Why not the first member? The first member has to wait for &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;GMS.join_timeout&lt;/span&gt; millis (defined in &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;chat-tcp.xml&lt;/span&gt;) to see if it discovers any other members, and so it always runs into this timeout.&lt;br /&gt;&lt;br /&gt;To change &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;bind_addr&lt;/span&gt; and &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;initial_hosts&lt;/span&gt;, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;application.properties&lt;/span&gt; has to be changed &lt;b&gt;before&lt;/b&gt; compiling to native code.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Caveats &lt;/h3&gt;The quarkus-jgroups extension depends on JGroups-4.1.2-SNAPSHOT, which it may not find unless a snapshot repository has been added to the POM (or &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;settings.xml&lt;/span&gt;). Alternatively, &lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;git clone https://github.com/belaban/JGroups.git ; cd JGroups ; mvn install&lt;/span&gt; will generate and install this artifact in your local maven repo.&lt;br /&gt;&lt;br /&gt;Currently, only TCP is supported (&lt;span style="font-family: &amp;quot;courier new&amp;quot; , &amp;quot;courier&amp;quot; , monospace;"&gt;chat-tcp.xml&lt;/span&gt;). UDP will be supported once MulticastSockets are properly supported by GraalVM (see [5] for details).&lt;br /&gt;&lt;br /&gt;For some obscure reason, &lt;br /&gt;&lt;pre style="background-color: white; color: black; font-family: 'Monaco'; font-size: 9.0pt;"&gt;&lt;span style="background-color: #efefef;"&gt;&amp;lt;&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;enableJni&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;true&lt;span style="background-color: #efefef;"&gt;&amp;lt;/&lt;/span&gt;&lt;span style="background-color: #efefef; color: navy; font-weight: bold;"&gt;enableJni&lt;/span&gt;&lt;span style="background-color: #efefef;"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;&lt;br /&gt;had to be enabled in the POM, or else native compilation would fail. I hope to remove this once I understand why...&lt;br /&gt;&lt;br /&gt;&lt;h3&gt;Outlook&lt;/h3&gt;This was a relatively quick port of JGroups to native code. For feedback and questions please use the JGroups mailing list.&lt;br /&gt;&lt;br /&gt;The following things are on my todo list for further development:&lt;br /&gt;&lt;ul&gt;&lt;li&gt;Provide more JGroups classes via extensions, e.g. RpcDispatcher (to make remote method calls)&lt;/li&gt;&lt;li&gt;Provide docker images with native executables&lt;/li&gt;&lt;li&gt;Implement support for UDP&lt;/li&gt;&lt;li&gt;Trim down the size of the executable even more&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;Enjoy!&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;[1] &lt;a href="https://github.com/jgroups-extras/quarkus-jgroups"&gt;https://github.com/jgroups-extras/quarkus-jgroups&lt;/a&gt;&lt;br /&gt;[2] &lt;a href="https://github.com/jgroups-extras/quarkus-jgroups-chat"&gt;https://github.com/jgroups-extras/quarkus-jgroups-chat&lt;/a&gt;&lt;br /&gt;[3] &lt;a href="https://quarkus.io/"&gt;https://quarkus.io&lt;/a&gt;&lt;br /&gt;[4] &lt;a href="https://www.graalvm.org/"&gt;https://www.graalvm.org&lt;/a&gt;&lt;br /&gt;[5] &lt;a href="https://github.com/belaban/JGroups/blob/master/doc/design/PortingToGraalVM.txt"&gt;https://github.com/belaban/JGroups/blob/master/doc/design/PortingToGraalVM.txt&lt;/a&gt;&lt;br /&gt;[6] &lt;a href="https://github.com/belaban/JGroups/blob/master/tests/perf/org/jgroups/tests/perf/ProgrammaticUPerf2.java"&gt;https://github.com/belaban/JGroups/blob/master/tests/perf/org/jgroups/tests/perf/ProgrammaticUPerf2.java&lt;/a&gt; &lt;br /&gt;&lt;br /&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/zii9-47XVJI" height="1" width="1" alt=""/&gt;</content><summary>I'm happy to announce the availability of a JGroups extension for Quarkus! What? Quarkus is a framework that (among other things) compiles Java code down to native code (using GraalVM [4]), removing code that's not needed at run time. Quarkus analyzes the code in a build phase, and removes code that's not used at run time, in order to have a small executable that starts up quickly. This means that...</summary><dc:creator>Bela Ban</dc:creator><dc:date>2019-07-03T13:13:00Z</dc:date><feedburner:origLink>http://belaban.blogspot.com/2019/07/compiling-jgroups-to-native-code-with.html</feedburner:origLink></entry><entry><title>Quickly set up a LAMP stack on Red Hat Enterprise Linux 8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/oN54tNbgLhM/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Infrastructure" scheme="searchisko:content:tags" /><category term="LAMP" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Red Hat Enterprise Linux" scheme="searchisko:content:tags" /><category term="RHEL8" scheme="searchisko:content:tags" /><author><name>Maxim Burgerhout</name></author><id>searchisko:content:id:jbossorg_blog-quickly_set_up_a_lamp_stack_on_red_hat_enterprise_linux_8</id><updated>2019-07-03T07:00:58Z</updated><published>2019-07-03T07:00:58Z</published><content type="html">&lt;p&gt;Have you tried &lt;a href="https://developers.redhat.com/rhel8/" target="_blank" rel="noopener noreferrer"&gt;Red Hat Enterprise Linux 8&lt;/a&gt; (RHEL8) yet? Read on to learn how to quickly set up a &lt;a href="https://developers.redhat.com/blog/2017/03/07/how-to-set-up-a-lamp-stack-on-red-hat-enterprise-linux-7/" target="_blank" rel="noopener noreferrer"&gt;LAMP stack&lt;/a&gt; on RHEL8 so you can play around with the new features built into the operating system.&lt;/p&gt; &lt;p&gt;A LAMP stack is made up of four main components and some glue. The first main component in a LAMP stack (the &amp;#8220;L&amp;#8221;) is Linux. In my example, I’m using Red Hat Enterprise Linux 8 for that, which gives me a secure operating system, a modern programming environment, and a user-friendly set of tools to control it.&lt;span id="more-591417"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;As for the web server, traditionally the “A” in LAMP stood for &lt;a href="https://www.apache.org" target="_blank" rel="noopener noreferrer"&gt;Apache&lt;/a&gt;, but in Red Hat Enterprise Linux 8, we actually have options here. We ship Apache &lt;code&gt;httpd&lt;/code&gt; with RHEL8, but we also ship NGINX. Because I’m a bit traditional here, I’ll opt for Apache.&lt;/p&gt; &lt;p&gt;In RHEL8, Apache ships as an &lt;a href="https://developers.redhat.com/blog/2018/11/15/rhel8-introducing-appstreams/" target="_blank" rel="noopener noreferrer"&gt;AppStream&lt;/a&gt;, which—among other things—allows us to provide content with varying life cycles. With AppStreams, we can, for example, ship multiple versions of Python and add new versions of programming environments outside of the normal RHEL release cadence.&lt;/p&gt; &lt;p&gt;Installing Apache on RHEL8 as easy as it was on earlier versions of Red Hat Enterprise Linux. Run:&lt;/p&gt; &lt;pre&gt;$ sudo yum -y install httpd&lt;/pre&gt; &lt;p&gt;(You are using &lt;code&gt;sudo&lt;/code&gt;, right? If you didn&amp;#8217;t set your user ID to be an administrator during installation, see &lt;a href="https://developers.redhat.com/blog/2018/08/15/how-to-enable-sudo-on-rhel/" target="_blank" rel="noopener noreferrer"&gt;How to enable sudo on Red Hat Enterprise Linux&lt;/a&gt;.) This command enables the Apache 2.4 AppStream and installs the &lt;code&gt;httpd&lt;/code&gt; package, including its default dependencies.&lt;/p&gt; &lt;p&gt;To start this newly installed web server and make sure it will automatically start after a reboot, I’ll need to run:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl enable --now httpd&lt;/pre&gt; &lt;p&gt;And, because I’ll want my server to be reachable over the network, I’ll need to open ports 80 and 443 on my system. We can do that from the Red Hat Enterprise Linux 8 Web Console (see the &lt;a href="https://developers.redhat.com/devnation/" target="_blank" rel="noopener noreferrer"&gt;DevNation&lt;/a&gt; video at the end of this article for a demo), but for now, let’s use the command-line tools provided with RHEL8. They are quite easy:&lt;/p&gt; &lt;pre&gt;$ sudo firewall-cmd --add-service=http --add-service=https&lt;/pre&gt; &lt;pre&gt;$ sudo firewall-cmd --add-service=http --add-service=https --permanent&lt;/pre&gt; &lt;p&gt;That’s it. The first command opens ports 80 and 443 right now, and the second command makes sure that, after a reboot or firewall restart, the ports remain open.&lt;/p&gt; &lt;p&gt;Now for the database part. Again, traditionally, the “M” in LAMP stood for &lt;a href="https://www.mysql.com" target="_blank" rel="noopener noreferrer"&gt;MySQL&lt;/a&gt;&lt;em&gt;.&lt;/em&gt; However, nowadays, it can also mean &lt;a href="https://mariadb.org" target="_blank" rel="noopener noreferrer"&gt;MariaDB&lt;/a&gt;, &lt;a href="https://www.mongodb.com" target="_blank" rel="noopener noreferrer"&gt;MongoDB&lt;/a&gt;, or even &lt;a href="https://www.postgresql.org" target="_blank" rel="noopener noreferrer"&gt;PostgreSQL&lt;/a&gt;. You can see what databases RHEL8 ships with by running:&lt;/p&gt; &lt;pre&gt;sudo yum module list&lt;/pre&gt; &lt;p&gt;(I’ve stripped the non-database AppStreams from the output in Figure 1 for brevity.)&lt;/p&gt; &lt;div id="attachment_603857" style="width: 1090px" class="wp-caption alignnone"&gt;&lt;img aria-describedby="caption-attachment-603857" class="wp-image-603857" src="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-06-05-19-54-47-1024x128.png" alt="" width="1080" height="135" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-06-05-19-54-47-1024x128.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-06-05-19-54-47-300x38.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-06-05-19-54-47-768x96.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2019/05/Screenshot-from-2019-06-05-19-54-47.png 1358w" sizes="(max-width: 1080px) 100vw, 1080px" /&gt;&lt;p id="caption-attachment-603857" class="wp-caption-text"&gt;Figure 1: List of database AppStreams available in Red Hat Enterprise Linux 8.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As you can see, MongoDB is not an option for RHEL8. You can read the &lt;a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8-beta/html/8.0_beta_release_notes/" target="_blank" rel="noopener noreferrer"&gt;RHEL8 release notes&lt;/a&gt; for a little background on why that is. What we do have, though, is MySQL 8, MariaDB 10.3, PostgreSQL 9.6 and 10, and &lt;a href="https://redis.io" target="_blank" rel="noopener noreferrer"&gt;Redis&lt;/a&gt; 5. That’s a lot to choose from!&lt;/p&gt; &lt;p&gt;I want to build a fairly traditional LAMP stack here, so I’ll opt for MariaDB, which is a drop-in replacement for MySQL. I want to install a database server, so the default profile (‘&lt;code&gt;server&lt;/code&gt;’, indicated by the &lt;code&gt;[d]&lt;/code&gt; in the output above) will work for me. If I only wanted the client bits, I could have installed the &lt;code&gt;client&lt;/code&gt; profile, saving me a bit of disk space, and giving me, obviously, only the client bits of MariaDB.&lt;/p&gt; &lt;p&gt;For now, however, I’ll run:&lt;/p&gt; &lt;pre&gt;$ sudo yum -y module install mariadb&lt;/pre&gt; &lt;p&gt;By the way, a standard &lt;code&gt;sudo yum -y install mariadb-server&lt;/code&gt; will work just as well.&lt;/p&gt; &lt;p&gt;A database that’s not running is of little use, so let’s start it with:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl enable --now mariadb&lt;/pre&gt; &lt;p&gt;I don’t need to open firewall ports, because my web server and database server run on the same machine. If you have separate machines for Apache and MariaDB, you’ll need to add the MySQL service to the firewall, using the &lt;code&gt;firewall-cmd&lt;/code&gt; command I showed above. You would also need to tune the SELinux policy to allow Apache to make network connections to a database (safety first!), by running:&lt;/p&gt; &lt;pre&gt;$ sudo setsebool -P httpd_can_network_connect_db on&lt;/pre&gt; &lt;p&gt;Finally, because I take my lessons around security to heart, I’ll run the &lt;code&gt;mysql_secure_installation&lt;/code&gt; script:&lt;/p&gt; &lt;pre&gt;$ sudo mysql_secure_installation&lt;/pre&gt; &lt;p&gt;We are almost there. I have a proper Linux machine, I have my web server, and I have my database server. What’s still missing is a programming environment and some glue. Let’s see what programming environments are available for the &amp;#8220;P&amp;#8221; in LAMP:&lt;/p&gt; &lt;pre&gt;$ sudo yum module list&lt;/pre&gt; &lt;p&gt;I’ll not show the whole output again here, but we have PHP, we have Python in two major versions, we have Ruby, and a plethora of other options. Traditional LAMP means PHP for me, though, so that’s what I’ll be installing. One simple command should that care of it:&lt;/p&gt; &lt;pre&gt;$ sudo yum -y module install php&lt;/pre&gt; &lt;p&gt;Two final steps remain. First, there&amp;#8217;s the glue. To enable connecting to the MariaDB database from my PHP pages, I need to install a tiny library:&lt;/p&gt; &lt;pre&gt;$ sudo yum -y install php-mysqlnd&lt;/pre&gt; &lt;p&gt;Then, as the final step, I’ll restart Apache to pick up my newly installed PHP and the PHP MySQL library:&lt;/p&gt; &lt;pre&gt;$ sudo systemctl restart httpd&lt;/pre&gt; &lt;p&gt;That’s it, we are done. We can go into &lt;code&gt;/var/www/html&lt;/code&gt; and drop a PHP application in it and everything should work.&lt;/p&gt; &lt;p&gt;Some months back, Burr Sutter hosted me on DevNation Live, and we recorded an overview of RHEL8 from a developer point of view. We covered installing and using programming environments, managing your development systems, and much more. Interested? Watch the video:&lt;/p&gt; &lt;p&gt;&lt;iframe src="https://www.youtube.com/embed/4DiLdgtcavo" width="560" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;span data-mce-type="bookmark" style="display: inline-block; width: 0px; overflow: hidden; line-height: 0;" class="mce_SELRES_start"&gt;﻿&lt;/span&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;p&gt;I hope this overview is helpful when you&amp;#8217;re ready to set up a LAMP stack on RHEL8. Let me know what you think in the comments or on Twitter at &lt;a href="https://twitter.com/MaximBurgerhout"&gt;@MaximBurgerhout&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#38;linkname=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F03%2Fquickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8%2F&amp;#038;title=Quickly%20set%20up%20a%20LAMP%20stack%20on%20Red%20Hat%20Enterprise%20Linux%208" data-a2a-url="https://developers.redhat.com/blog/2019/07/03/quickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8/" data-a2a-title="Quickly set up a LAMP stack on Red Hat Enterprise Linux 8"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/03/quickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8/"&gt;Quickly set up a LAMP stack on Red Hat Enterprise Linux 8&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/oN54tNbgLhM" height="1" width="1" alt=""/&gt;</content><summary>Have you tried Red Hat Enterprise Linux 8 (RHEL8) yet? Read on to learn how to quickly set up a LAMP stack on RHEL8 so you can play around with the new features built into the operating system. A LAMP stack is made up of four main components and some glue. The first main component in a LAMP stack (the “L”) is Linux. In my example, I’m using Red Hat Enterprise Linux 8 for that, which gives me a sec...</summary><dc:creator>Maxim Burgerhout</dc:creator><dc:date>2019-07-03T07:00:58Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/03/quickly-set-up-a-lamp-stack-on-red-hat-enterprise-linux-8/</feedburner:origLink></entry><entry><title>Introduction to cloud-native application environment architecture</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/o9LLSQCvgkw/" /><category term="Agile Integration" scheme="searchisko:content:tags" /><category term="cloud" scheme="searchisko:content:tags" /><category term="cloud native development" scheme="searchisko:content:tags" /><category term="container" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="Red Hat Integration" scheme="searchisko:content:tags" /><author><name>Christina Lin</name></author><id>searchisko:content:id:jbossorg_blog-introduction_to_cloud_native_application_environment_architecture</id><updated>2019-07-02T07:00:59Z</updated><published>2019-07-02T07:00:59Z</published><content type="html">&lt;p&gt;Cloud-native environment architecture can be challenging to understand. To help make sense of it for application developers and software/system architects,  I will attempt to explain the various parts and how they work together. Toward this end, I find it helpful to think about the architecture in four separate layers: application software development, service scaling, application network, and container orchestration platform.&lt;/p&gt; &lt;p&gt;In this article, I will describe the first technology layer: application software development. I drew the following diagram to make these concepts easier to visualize.&lt;br /&gt; &lt;span id="more-604597"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-604627 alignright" src="https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-181x300.png" alt="" width="337" height="558" srcset="https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-181x300.png 181w, https://developers.redhat.com/blog/wp-content/uploads/2019/06/imageedit_78_5224434789-617x1024.png 617w" sizes="(max-width: 337px) 100vw, 337px" /&gt;&lt;/p&gt; &lt;p&gt;Container native or cloud-native application development is often referred to as a common greenfield system, where applications are broken down into microservices. Each microservice tends to have its own source of data, be independent from the others, and also be deployed in a distributed way.&lt;/p&gt; &lt;p&gt;The benefit of such implementation makes applications ever more agile and polyglot, isolating problems, and making the codebase smaller and supposedly easier to maintain.  If I tell were to you that this means life will be good from now on, I would be lying.&lt;/p&gt; &lt;p&gt;To achieve the benefit of an agile, truly scalable, automated container/cloud-native system, a lot of thought needs to go into considering factors like applications, platforms, and personas, including:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Using the right technology for the scenario &lt;ul&gt; &lt;li&gt;Complex solutions can sometimes be overkill&lt;/li&gt; &lt;li&gt;Using the wrong solution in the wrong place can cause displaced responsibility&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;li&gt;Domain-driven design with continuous integration &lt;ul&gt; &lt;li&gt;Async events or API&lt;/li&gt; &lt;li&gt;How to integrate with existing brownfield applications&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The diagram shows a rough overview of how various elements of container/cloud-native system work together, and I hope it also helps you decide when or whether to introduce a particular piece of technology.&lt;/p&gt; &lt;p&gt;To make more sense for application developers and software/system architects, I deliberately divided the architecture into four planes. Each plane itself can be broken into much more detail. It consists of many pieces of technologies, and these are abstracted based on the fundamental functionality they bring to the cloud-native application environment.&lt;/p&gt; &lt;h2&gt;Application software development layer&lt;/h2&gt; &lt;p&gt;The application software development layer is about modeling domains, how microservices are defined, how they should be deployed, and the software patterns applied in the system that can help to develop a loosely coupled and continuously evolving system. It’s also about the communication technology and patterns between applications.&lt;/p&gt; &lt;h2&gt;Service scaling — Knative&lt;/h2&gt; &lt;p&gt;Scaling to zero when the application is not in use will allow resource optimization. This layer takes the characteristic of cloud computing to the fullest, but not all services need it.&lt;/p&gt; &lt;h2&gt;Application network — Service mesh&lt;/h2&gt; &lt;p&gt;This is a very common architecture functionality in the distributed microservices environment. Having this layer allows better and more uniform control over the communication between microservices and better observability, too. DevOps can use this layer to apply common security, failure recovery, rollout policies, etc., as well as setting customized ones. This layer takes away much redundant work for developers.&lt;/p&gt; &lt;h2&gt;Container orchestration platform — Red Hat OpenShift&lt;/h2&gt; &lt;p&gt;This is the foundation of cloud-native environment architecture. It provides basic and essential capabilities, such as container orchestration, service discovery, CI/CD automation, logging, etc.&lt;/p&gt; &lt;h2&gt;Domain-driven design and Agile Integration&lt;/h2&gt; &lt;p&gt;&lt;b&gt;Domain-driven design (DDD)&lt;/b&gt; principles apply to the way we develop applications in cloud-native world, by allowing better communication between business users and developers, modeling objects according to the domain, and setting &lt;i&gt;boundaries&lt;/i&gt; to segment the complex business requirement. An important aspect of DDD is continuous integration.&lt;/p&gt; &lt;p&gt;&lt;b&gt;Agile Integration&lt;/b&gt; evolved from the basic concept of microservices and DDD. In software development other than modeling the business logic, many other factors also need to be taken into account. Agile integration on top of DDD helps you better define not only the model and the boundaries but also how they should be separated by different functional concerns and how they can be physically deployed. There are three main responsibilities for agile integration:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;b&gt;Core — &lt;/b&gt;The majority of the microservice that implements business logic or domain capability belongs to this category. They are a good example of typical small simple microservices that are lightweight in both runtime and how it communicates to each other.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Composite — &lt;/b&gt;Setting the right granularity of the service, handling transactions, orchestrating, and transforming data for various types of events are all handled here. Aggregation and separation of data and events are done in this category. This acts as the simple stateless pipe that directs the events from one point to another in the desired and suitable format and sometimes needs to be the gateway to external SaaS, brownfield application or even services outside the bounded context.&lt;/li&gt; &lt;li&gt;&lt;b&gt;Control and dispatch — &lt;/b&gt;If the system only interacts with a handful of external systems, you may not need this category. This category allows you to have more insight and meaningful business control over the services your system provides. It&amp;#8217;s a place to hide the constant bothersome customization from external client requests that require quick and ad hoc changes. Facade pattern applies in this category.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Applying the above principles will allow you to:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Capture the model and entities from the business requirement.&lt;/li&gt; &lt;li&gt;Set the boundaries between business domains.&lt;/li&gt; &lt;li&gt;Categorize the nature of the code and separate it into independent, separate, deployable microservice instances.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Another important fundamental problem is the communication between these microservices. I believe the communication backbone of these microservices should mostly be event-driven and asynchronous, so the distribution of data can be loosely coupled, and the system will become reactive. A drawback is that this type of design can make transactions rather complicated, but this can be overcome by implementing techniques like event sourcing. For communication between boundaries or external clients/partners, I strongly suggest using API simply because:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Most of these processes are in the form of request and reply, which is the natural default behavior of REST API.&lt;/li&gt; &lt;li&gt;Contract definition and repository management technology are more mature in the API space.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Next time, I will talk about different types of data in the events and how to handle them, as well as how to achieve data consistency in the cloud-native application environment. I&amp;#8217;ll also look at all the other layers in my cloud-native application overview: service scaling, application network, and container orchestration platform.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#38;linkname=Introduction%20to%20cloud-native%20application%20environment%20architecture" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F02%2Fintroduction-to-cloud-native-application-environment-architecture%2F&amp;#038;title=Introduction%20to%20cloud-native%20application%20environment%20architecture" data-a2a-url="https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/" data-a2a-title="Introduction to cloud-native application environment architecture"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/"&gt;Introduction to cloud-native application environment architecture&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/o9LLSQCvgkw" height="1" width="1" alt=""/&gt;</content><summary>Cloud-native environment architecture can be challenging to understand. To help make sense of it for application developers and software/system architects,  I will attempt to explain the various parts and how they work together. Toward this end, I find it helpful to think about the architecture in four separate layers: application software development, service scaling, application network, and con...</summary><dc:creator>Christina Lin</dc:creator><dc:date>2019-07-02T07:00:59Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/02/introduction-to-cloud-native-application-environment-architecture/</feedburner:origLink></entry><entry><title>JBoss Editorial (July 1st): Streaming, Transactions, Monitoring and more</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/rkeTUH_C92s/jboss-editorial-july-1st-streaming-transactions-monitoring-and-more" /><category term="amq streams" scheme="searchisko:content:tags" /><category term="Camel" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="Elytron" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_weeklyeditorial" scheme="searchisko:content:tags" /><category term="grafana" scheme="searchisko:content:tags" /><category term="hal" scheme="searchisko:content:tags" /><category term="Hibernate" scheme="searchisko:content:tags" /><category term="jBPM" scheme="searchisko:content:tags" /><category term="Kafka" scheme="searchisko:content:tags" /><category term="narayana" scheme="searchisko:content:tags" /><category term="news" scheme="searchisko:content:tags" /><category term="prometheus" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="weekly_editorial" scheme="searchisko:content:tags" /><category term="weekly_update" scheme="searchisko:content:tags" /><category term="wildfy" scheme="searchisko:content:tags" /><author><name>Kevin Conner</name></author><id>searchisko:content:id:jbossorg_blog-jboss_editorial_july_1st_streaming_transactions_monitoring_and_more</id><updated>2019-07-01T16:40:14Z</updated><published>2019-07-01T16:40:00Z</published><content type="html">&lt;!-- [DocumentBodyStart:a00b36bc-5b3e-4159-bb21-cb93cd1545bf] --&gt;&lt;div class="jive-rendered-content"&gt;&lt;p&gt;Welcome to another edition of the JBoss Editorial, join me in another trip through the JBoss Communities as we search for exciting developments and news from our projects. &lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Apache Kafka Streaming with Red Hat AMQ Streams&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;In a two part series discussing the development of an Apache Kafka Streams application, Adam walks us through all of the necessary steps to create an application using Red Hat AMQ Streams and the Streams Domain Specific Language.&amp;#160; The first article in the series &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/17/building-apache-kafka-streams-applications-using-red-hat-amq-streams-part-1/" rel="nofollow"&gt;discusses the creation of a simple containerised example application&lt;/a&gt; which can be used as the building block for the discussion within the second article when Adam shows how to create a &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/18/building-apache-kafka-streams-applications-using-red-hat-amq-streams-part-2/" rel="nofollow"&gt;more comprehensive pipeline using real world data, the Kafka Stream DSL and the Vertx Kafka client to compose an application which will process the events and visualise the outcome via a javascript dashboard&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Transactions, Object Stores and Expiry Scanners&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Transactions are a feature which ensure applications behave correctly in the face of failures, handling the management of the resources enlisted in the transaction and coordinating their responses to achieve a consistent outcome.&amp;#160; Transactions are conceptually simple to use, however as with swans gracefully swimming the real work takes place under the surface where it's largely invisible to the majority of us.&amp;#160; &lt;a class="jive-link-external-small" href="https://jbossts.blogspot.com/2019/06/expiry-scanners-and-object-store-in.html" rel="nofollow"&gt;The Narayana transaction manager is responsible for providing this feature within the Red Hat Middleware products but how does it work?&amp;#160; What is an Object Store?&amp;#160; How are failures handled?&amp;#160; How does recovery work?&amp;#160; How does expiry work?&amp;#160; Let's find out from Ondra ...&lt;/a&gt;&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Monitoring jBPM using Prometheus and Grafana&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The jBPM 7.21.0.Final release introduced a new Prometheus Kie Server Extension for publishing metrics related to the server and its runtime behaviour, enabling a deeper understanding of the server and the business processes.&amp;#160; In an article on the subject &lt;a class="jive-link-external-small" href="https://mswiderski.blogspot.com/2019/06/jbpm-monitoring-using-prometheus-and.html" rel="nofollow"&gt;Cristiano explains how to enable&amp;#160; this extension, includes a short video showing it in action and provides a docker compose configuration for creating a local setup which you can use as a playground for exploring the integration with these tools&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Securing Web Applications using Elytron&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Web applications deployed to &lt;a class="jive-link-external-small" href="https://wildfly.org/" rel="nofollow"&gt;WildFly&lt;/a&gt; can take advantage of the Elytron integration to require clients authenticate using X.509 certificates, this integration allows the server to not only verify the identity of the client but also use this identity to drive authorization within the application.&amp;#160; In a blog post on the subject &lt;a class="jive-link-blog-small" data-containerId="5158" data-containerType="37" data-objectId="6302" data-objectType="38" href="https://developer.jboss.org/people/fjuma/blog/2019/06/14/using-elytron-certificate-based-authentication-with-authorization#jive_content_id_Twoway_SSL_configuration"&gt;Farah takes us through the steps to generate certificates, configure the server for CLIENT_CERT with mutual authentication and finally demonstrate the feature using a sample application&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Elytron also provides a credential store API/SPI which applications can use to manage the secure storage of credentials, check out Darran's blog post &lt;a class="jive-link-external-small" href="https://darranl.blogspot.com/2019/06/wildfly-elytron-credential-store-apis.html" rel="nofollow"&gt;for more details and an example application showing how it can be used&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Camel Core Decomposition&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The Camel team are very busy working towards the &lt;a class="jive-link-external-small" href="http://camel.apache.org/" rel="nofollow"&gt;Apache Camel 3&lt;/a&gt; release, with much work already having been done and three milestone releases under their belt.&amp;#160; One of the biggest efforts underway within milestone 4 is the &lt;a class="jive-link-external-small" href="http://www.davsclaus.com/2019/06/apache-camel-3-camel-core-vs-camel-core.html" rel="nofollow"&gt;decomposition of camel-core into smaller modules to allow applications to choose only those components they will need and help to minimise the size of the transitive dependency graph&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Customising the WildFly Console Title&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;The release of &lt;a class="jive-link-external-small" href="https://hal.github.io/releases/" rel="nofollow"&gt;Hal 3.2.0&lt;/a&gt;, part of &lt;a class="jive-link-external-small" href="https://wildfly.org/downloads/" rel="nofollow"&gt;WildFly 17&lt;/a&gt;, now includes an option for customising the title of your console tab allowing you to better differentiate between different servers should you have multiple tabs open.&amp;#160; &lt;a class="jive-link-external-small" href="https://hal.github.io/blog/custom-title/" rel="nofollow"&gt;The new feature relies on two attributes within the management model, the &lt;strong&gt;name&lt;/strong&gt; of the server and the &lt;strong&gt;organization&lt;/strong&gt; it belongs to, which can be composed into the title through the settings page of the console&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;Red Hat Decision Manager Workshop Refresh&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;With the release of Red Hat Decision Manager 7.3 Eric Schabell has been revisiting his free online workshop to align its content with the new release.&amp;#160; Eric has now &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/beginners-guide-building-an-online-retail-web-shop-workshop.html" rel="nofollow"&gt;updated the first two labs in the workshop covering the installation and the creation of a new project to be used within subsequent labs&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;JBoss Out and About&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric Schabell will be presenting at &lt;a class="jive-link-external-small" href="https://devconf.info/us" rel="nofollow"&gt;DevConf.us&lt;/a&gt; in Boston, an annual, free technology conference sponsored by &lt;a class="jive-link-external-small" href="https://redhat.com/" rel="nofollow"&gt;Red Hat&lt;/a&gt; which will take place from August 17th to 19th.&amp;#160; Eric has three presentations accepted including &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/devconfus-2019-open-source-career-with-automation-integration-acceptances.html" rel="nofollow"&gt;"How to Jump Start Your Career in Open Source", "3 Pitfalls Everyone Ignores with Microservices" and "7 Steps to Expanding Your AppDev Toolbox"&lt;/a&gt;.&amp;#160; Eric will also be in Raleigh, North Carolina for &lt;a class="jive-link-external-small" href="https://www.devopsdays.org/events/2019-raleigh/welcome/" rel="nofollow"&gt;DevOps Days Raleigh&lt;/a&gt; which is taking place from October 1st to 2nd, Eric will be presenting "&lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/07/devops-days-raleigh-2019-devops-heros-accepted.html" rel="nofollow"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/a&gt;"&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;Eric recently gave a keynote presentation during &lt;a class="jive-link-external-small" href="https://events.redhat.com/profile/form/index.cfm?PKformID=0x51358abcd" rel="nofollow"&gt;Red Hat Tech Day 2019&lt;/a&gt; in Netherlands entitled &lt;a class="jive-link-external-small" href="http://www.schabell.org/2019/06/red-hat-tech-day-2019-open-is-key-to-your-career-slides.html" rel="nofollow"&gt;"Open Key to Your Career"&lt;/a&gt;.&lt;/p&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;h2&gt;New Releases&lt;/h2&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="http://hibernate.org/" rel="nofollow"&gt;hibernate&lt;/a&gt; team have announced the release of&lt;ul&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/06/18/hibernate-search-5-11-2-Final-and-5-10-6-Final/" rel="nofollow"&gt;Hibernate Search 5.11.2.Final and 5.10.6.Final&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a class="jive-link-external-small" href="http://in.relation.to/2019/06/24/hibernate-search-6-0-0-Alpha7/" rel="nofollow"&gt;Hibernate Search 6.0.0.Alpha7&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;The &lt;a class="jive-link-external-small" href="https://quarkus.io/" rel="nofollow"&gt;Quarkus&lt;/a&gt; team have announced the release of &lt;a class="jive-link-external-small" href="https://developers.redhat.com/blog/2019/06/25/quarkus-0-17-0-now-available/" rel="nofollow"&gt;Quarkus 0.17.0&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p style="min-height: 8pt; padding: 0px;"&gt;&amp;#160;&lt;/p&gt;&lt;p&gt;That's all for this edition of the JBoss Editorial, please join us next time when we will take another journey through the JBoss communities in search of more news and articles.&lt;/p&gt;&lt;/div&gt;&lt;!-- [DocumentBodyEnd:a00b36bc-5b3e-4159-bb21-cb93cd1545bf] --&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/rkeTUH_C92s" height="1" width="1" alt=""/&gt;</content><summary>Welcome to another edition of the JBoss Editorial, join me in another trip through the JBoss Communities as we search for exciting developments and news from our projects.   Apache Kafka Streaming with Red Hat AMQ Streams   In a two part series discussing the development of an Apache Kafka Streams application, Adam walks us through all of the necessary steps to create an application using Red Hat ...</summary><dc:creator>Kevin Conner</dc:creator><dc:date>2019-07-01T16:40:00Z</dc:date><feedburner:origLink>https://developer.jboss.org/blogs/weekly-editorial/2019/07/01/jboss-editorial-july-1st-streaming-transactions-monitoring-and-more</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 13, Part 3: Architectures and operating systems</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gjn0tpjng00/" /><category term="developer" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><author><name>Roman Kennke</name></author><id>searchisko:content:id:jbossorg_blog-shenandoah_gc_in_jdk_13_part_3_architectures_and_operating_systems</id><updated>2019-07-01T07:00:43Z</updated><published>2019-07-01T07:00:43Z</published><content type="html">&lt;p&gt;In this series, I&amp;#8217;ve been covering new developments of &lt;a href="https://developers.redhat.com/videos/youtube/N0JTvyCxiv8/"&gt;Shenandoah GC&lt;/a&gt; coming up in &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;JDK 13&lt;/a&gt;. In &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;part 1&lt;/a&gt;, I looked at the switch to load reference barriers, and,&lt;a href="https://developers.redhat.com/blog/?p=606477"&gt; in part 2&lt;/a&gt;, I looked at plans for eliminating an extra word per object. In this article, I&amp;#8217;ll look at a new architecture and a new operating system that Shenandoah GC will be working with.&lt;br /&gt; &lt;span id="more-606497"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Solaris&lt;/h2&gt; &lt;p&gt;&lt;a href="https://bell-sw.com/"&gt;BellSoft&lt;/a&gt; &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009556.html"&gt;recently contributed a change&lt;/a&gt; that allowed Shenandoah to build and run on Solaris. Shenandoah itself has no operating system-specific code in it; therefore, it&amp;#8217;s relatively easy to port to new operating systems. In this case, it mostly amounts to a batch of fixes to make the Solaris compiler happy, like removing a trailing comma in enums.&lt;/p&gt; &lt;p&gt;One notable gotcha we encountered was with Solaris 10. Contrary to what later versions of Solaris do—and what basically all other relevant operating systems do—Solaris 10 maps user memory to upper address ranges (e.g., to addresses starting with 0xff&amp;#8230; instead of 0x7f). Other operating systems reserve the upper half of the address space to kernel memory.&lt;/p&gt; &lt;p&gt;This approach conflicted with an optimization of Shenandoah&amp;#8217;s task queues, which would encode pointers assuming it has some spare space in the upper address range. It was easy enough to disable via build-time-flag, &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009593.html"&gt;and Aleksey Shipilev did&lt;/a&gt; that. &lt;a href="http://hg.openjdk.java.net/jdk/jdk/rev/f2f11d7f7f4e"&gt;The fix&lt;/a&gt; is totally internal to Shenandoah GC and does not affect the representation of Java references in heap. With this change, Shenandoah can be built and run on Solaris 10 and newer (and possibly older, but we haven&amp;#8217;t tried). This is not only interesting for folks who want Shenandoah to run on Solaris, but also for us, because it requires the extra bit of cleanliness to make non-mainline toolchains happy.&lt;/p&gt; &lt;p&gt;The changes for Solaris support are already in JDK 13 development repositories and are already backported to Shenandoah&amp;#8217;s JDK 11 and JDK 8 backports repositories.&lt;/p&gt; &lt;h2&gt;x86_32&lt;/h2&gt; &lt;p&gt;Shenandoah used to support x86_32 in &amp;#8220;passive&amp;#8221; mode a long time ago. This mode relies only on stop-the-world GC to avoid implementing barriers (basically, it runs Degenerated GC all the time). It was an interesting mode to see the footprint numbers that you can get with uncommits and slimmer native pointers with really small microservice-size VMs. This mode was dropped before integration upstream, because many Shenandoah tests expect all heuristics/modes to work properly, and having the rudimentary x86_32 support was breaking tier1 tests. So, we disabled it.&lt;/p&gt; &lt;p&gt;Today, we have significantly simplified runtime interface thanks to &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;load reference barriers&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/?p=606477"&gt;elimination of separate forwarding pointer slo&lt;/a&gt;t, and we can build the fully concurrent x86_32 on top of that. This approach allows us to maintain 32-bit cleanness in Shenandoah code (we have fixed &amp;#62;5 bugs ahead of this change!), and it serves as proof of concept that Shenandoah can be implemented on 32-bit platforms. It is interesting in scenarios where the extra footprint savings are important, such as in containers or embedded systems. The combination of LRB + no more forwarding pointer + 32-bit support gives us the current lowest bounds for a footprint that would be possible with Shenandoah.&lt;/p&gt; &lt;p&gt;The changes for x86_32-bit support are done and ready to be integrated into JDK 13. However, they are currently waiting for the elimination of forwarding pointer change, which in turn is waiting for a nasty C2 bug fix. The plan is to later backport it to Shenandoah JDK 11 and JDK 8 backports, after the load reference barriers and elimination of forwarding pointer changes have been backported.&lt;/p&gt; &lt;h2&gt;Other architectures and OSes&lt;/h2&gt; &lt;p&gt;With those two additions to OS and architectures support, Shenandoah will soon be available (e.g., known to build and run) on four operating systems: Linux, Windows, MacOS, and Solaris, plus three architectures: x86_64, arm64 and x86_32. Given Shenandoah&amp;#8217;s design with zero OS-specific code, and not overly complex architecture-specific code, we may be looking at more operating systems or architectures to join the flock in future releases (if anybody finds it interesting enough to implement).&lt;/p&gt; &lt;p&gt;As always, if you don’t want to wait for releases, you can already have everything and help sort out problems: check out &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main"&gt;the Shenandoah GC Wiki&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=606477"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F07%2F01%2Fshenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%203%3A%20Architectures%20and%20operating%20systems" data-a2a-url="https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/" data-a2a-title="Shenandoah GC in JDK 13, Part 3: Architectures and operating systems"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/"&gt;Shenandoah GC in JDK 13, Part 3: Architectures and operating systems&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gjn0tpjng00" height="1" width="1" alt=""/&gt;</content><summary>In this series, I’ve been covering new developments of Shenandoah GC coming up in JDK 13. In part 1, I looked at the switch to load reference barriers, and, in part 2, I looked at plans for eliminating an extra word per object. In this article, I’ll look at a new architecture and a new operating system that Shenandoah GC will be working with. Solaris BellSoft recently contributed a change that all...</summary><dc:creator>Roman Kennke</dc:creator><dc:date>2019-07-01T07:00:43Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/07/01/shenandoah-gc-in-jdk-13-part-3-architectures-and-operating-systems/</feedburner:origLink></entry><entry><title>DevOps Days Raleigh 2019: DevOps Heroes Workshop Accepted</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/b1gj3vS3XFI/devops-days-raleigh-2019-devops-heros-accepted.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="conference" scheme="searchisko:content:tags" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><category term="Process Automation Manager" scheme="searchisko:content:tags" /><category term="workshops" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-devops_days_raleigh_2019_devops_heroes_workshop_accepted</id><updated>2019-07-01T05:00:10Z</updated><published>2019-07-01T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div class="separator" style="background-color: white; clear: both; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-align: center;"&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" imageanchor="1" style="clear: left; color: #3778cd; float: left; margin-bottom: 1em; margin-right: 1em;" target="_blank"&gt;&lt;img alt="DevOps Days" border="0" data-original-height="174" data-original-width="700" height="79" src="https://2.bp.blogspot.com/-vgmNxmBmOmA/XH1mxi-J11I/AAAAAAAAtfs/drIxSJOyDCo0imTBzaWl0sJQUw722dT4ACLcBGAs/s320/Screenshot%2B2019-03-04%2Bat%2B18.54.11.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;&lt;a href="https://www.schabell.org/2019/04/devops-days-raleigh-2019-devops-heros.html" target="_blank"&gt;Previously I posted&lt;/a&gt; about submitting a workshop to the&amp;nbsp;&lt;/span&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" style="background-color: white; color: #4d469c; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px; text-decoration-line: none;" target="_blank"&gt;DevOps Days Raleigh&amp;nbsp;&lt;/a&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;from 1-2 Oct 2019.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;While thinking about how to leverage automation integration across organizations for more than just CI/CD and infrastructure automation, this workshop was born.&lt;/span&gt;&lt;br /&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;span style="background-color: white; color: #444444; font-family: &amp;quot;arial&amp;quot; , &amp;quot;tahoma&amp;quot; , &amp;quot;helvetica&amp;quot; , &amp;quot;freesans&amp;quot; , sans-serif; font-size: 13px;"&gt;It's a perfect chance to test out some of my theories, so I was really happy to get an acceptance letter last week and I'll be in Raleigh, NC to present the following workshop on Oct 1-2:&lt;/span&gt;&lt;br /&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;" /&gt;&lt;br /&gt;&lt;h3 style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; margin: 0px; position: relative;"&gt;DevOps Heroes - Adding Automation Integration to your Toolbox&lt;/h3&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;div&gt;&lt;i&gt;DevOps is more than the process of automating your CI/CD pipelines to generate code and deployment artifacts for production. It's also about organizational change and integration of many subtle processes that help you to deliver applications seamlessly from development to production through your operations.&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;a href="https://www.devopsdays.org/events/2019-raleigh/welcome/" imageanchor="1" style="clear: right; color: #4d469c; float: right; margin-bottom: 1em; margin-left: 1em; text-decoration-line: none;" target="_blank"&gt;&lt;img alt="DevOps Days" border="0" data-original-height="700" data-original-width="738" height="189" src="https://1.bp.blogspot.com/-FIa5Yx-TuM8/XH1o2SwpWNI/AAAAAAAAtf4/CIaDAo2_NYk9BsZytIj8QhXdJnZywv6qACLcBGAs/s200/Screenshot%2B2019-03-04%2Bat%2B19.04.53.png" style="background: transparent; border-radius: 0px; border: 1px solid transparent; box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 0px; padding: 8px; position: relative;" title="" width="200" /&gt;&lt;/a&gt;&lt;i&gt;Let's unlock the power of process integration with a hands-on workshop using your own devices (laptops). We'll take you through the integration of an organizational process as part of your DevOps strategy. Step-by-step you'll build a domain model, creating an automated process, integrating user approval tasks and more using modern open source process automation tooling.&amp;nbsp;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;Bring your laptop as this is a hands on experience that takes you from nothing to a fully working DevOps supporting automation integration project. No experience in automation integration is required. Let's add a new tool to your development toolbox and get you jump started on automation integration that's supporting your organizations DevOps activities.&lt;/i&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;(90 minute workshop format with bring your own device)&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/div&gt;&lt;div style="background-color: white; color: #444444; font-family: Arial, Tahoma, Helvetica, FreeSans, sans-serif; font-size: 13px;"&gt;Hope to see you all there!&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=ScEm-_VlLIA:iy_QSevmLhQ:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=ScEm-_VlLIA:iy_QSevmLhQ:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/ScEm-_VlLIA" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/b1gj3vS3XFI" height="1" width="1" alt=""/&gt;</content><summary>Previously I posted about submitting a workshop to the DevOps Days Raleigh from 1-2 Oct 2019. While thinking about how to leverage automation integration across organizations for more than just CI/CD and infrastructure automation, this workshop was born. It's a perfect chance to test out some of my theories, so I was really happy to get an acceptance letter last week and I'll be in Raleigh, NC to ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2019-07-01T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/ScEm-_VlLIA/devops-days-raleigh-2019-devops-heros-accepted.html</feedburner:origLink></entry><entry><title>Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/F6nuuTjd3jY/" /><category term="developer" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><author><name>Roman Kennke</name></author><id>searchisko:content:id:jbossorg_blog-shenandoah_gc_in_jdk_13_part_2_eliminating_the_forward_pointer_word</id><updated>2019-06-28T07:00:52Z</updated><published>2019-06-28T07:00:52Z</published><content type="html">&lt;p&gt;In this series of articles, I&amp;#8217;ll be discussing new developments of &lt;a href="https://developers.redhat.com/videos/youtube/N0JTvyCxiv8/"&gt;Shenandoah GC&lt;/a&gt; coming up in &lt;a href="https://developers.redhat.com/products/openjdk/overview/"&gt;JDK 13&lt;/a&gt;. In &lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;part 1&lt;/a&gt;, I looked at the switch of Shenandoah&amp;#8217;s barrier model to load reference barriers and what that means.&lt;/p&gt; &lt;p&gt;The change I want to talk about here addresses another frequent—perhaps the most frequent—concern about Shenandoah GC: the need for an extra word per object. Many believe this is a core requirement for Shenandoah, but it is actually not, as you&amp;#8217;ll see below.&lt;/p&gt; &lt;p&gt;Let&amp;#8217;s first look at the usual object layout of an object in the Hotspot JVM:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;Each section here marks a &lt;em&gt;heap word&lt;/em&gt;. That would be 64 bits on 64-bit architectures and 32 bits on 32-bit architectures.&lt;/p&gt; &lt;p&gt;The first word is the so-called &lt;em&gt;mark word&lt;/em&gt;, or header of the object. It is used for a variety of purposes. For example, it can keep the hash-code of an object; it has 3 bits that are used for various locking states; some GCs use it to track object age and marking status; and it can be &amp;#8220;overlaid&amp;#8221; with a pointer to the &amp;#8220;displaced&amp;#8221; mark, to an &amp;#8220;inflated&amp;#8221; lock, or, during GC, the forwarding pointer.&lt;/p&gt; &lt;p&gt;The second word is reserved for the &lt;em&gt;klass pointer&lt;/em&gt;. This is simply a pointer to the Hotspot-internal data structure that represents the class of the object.&lt;/p&gt; &lt;p&gt;Arrays would have an additional word next to store the array length. What follows is the actual payload of the object, that is, fields and array elements.&lt;/p&gt; &lt;p&gt;When running with Shenandoah enabled, the layout would look like this instead:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;-8:&lt;/td&gt; &lt;td&gt;[fwd pointer]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class-word ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3 ]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;The forward pointer is used for Shenandoah&amp;#8217;s concurrent evacuation protocol:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Normally, it points to itself -&amp;#62; the object is not evacuated yet.&lt;/li&gt; &lt;li&gt;When evacuating (by the GC or via a write-barrier), we first copy the object, then install a new forwarding pointer to that copy using an atomic compare-and-swap, possibly yielding a pointer to an offending copy. Only one copy wins.&lt;/li&gt; &lt;li&gt;Now, the canonical copy to read-from or write-to can be found simply by reading this forwarding pointer.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;The advantage of this protocol is that it&amp;#8217;s simple and cheap. The cheap aspect is important here, because, remember, Shenandoah needs to resolve the forwardee for every single read or write, even primitive ones. And, using this protocol, the read-barrier for this would be a single instruction:&lt;/p&gt; &lt;pre&gt;mov %rax, (%rax, -8)&lt;/pre&gt; &lt;p&gt;That&amp;#8217;s about as simple as it gets.&lt;/p&gt; &lt;p&gt;The disadvantage is obviously that it requires more memory. In the worst case, for objects without any payload, that&amp;#8217;s one more word for an otherwise two-word object. That&amp;#8217;s 50% more. With more realistic object size distributions, you&amp;#8217;d still end up with 5%-10% more overhead, YMMV. This also results in reduced performance: allocating the same number of objects would hit the ceiling faster than without that overhead—prompting GCs more often—and thus reduce throughput.&lt;/p&gt; &lt;p&gt;If you&amp;#8217;ve read carefully so far, you will have noticed that the mark word is also used/overlaid by some GCs to carry the forwarding pointer. So, why not do the same in Shenandoah? The answer is (or used to be), that reading the forwarding pointer required a little more work. We need to somehow distinguish a true mark word from a forwarding pointer. That is done by setting the lowest two bits in the mark word. Those are usually used as locking bits, but the combination 0b11 is not a legal combination of lock bits. In other words, when they are set, the mark word, with the lowest bits masked to 0, is to be interpreted as the forwarding pointer. This decoding of the mark word is significantly more complex than the above simple read of the forwarding pointer. I did in fact &lt;a href="https://twitter.com/rkennke/status/1076532471880212481"&gt;build a prototype a while ago&lt;/a&gt;, and the additional cost of the read-barriers was prohibitive and did not justify the savings.&lt;/p&gt; &lt;p&gt;All of this changed with the recent arrival of load &lt;a href="https://rkennke.wordpress.com/2019/05/15/shenandoah-gc-in-jdk13-part-i-load-reference-barriers/"&gt;reference barriers&lt;/a&gt;:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;We no longer require read-barriers, especially not on (very frequent) primitive reads.&lt;/li&gt; &lt;li&gt;The load-reference-barriers are conditional, which means their slow-path (actual resolution) is only activated when 1. GC is active and 2. the object in question is in the collection set. This is fairly infrequent. Compare that to the previous read-barriers which would be always-on.&lt;/li&gt; &lt;li&gt;We no longer allow any access to from-space copies. The strong invariant guarantees that we only ever read from and write to to-space copies.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;Two consequences are as follows. The from-space copy is not actually used for anything, and we can use that space for the forwarding pointer, instead of reserving an extra word for it. We can basically nuke the whole contents of the from-space copy and put the forwarding pointer anywhere. We only need to be able to distinguish between &amp;#8220;not forwarded&amp;#8221; (and we don&amp;#8217;t care about other contents) and &amp;#8220;forwarded&amp;#8221; (the rest is forwarding pointer).&lt;/p&gt; &lt;p&gt;It also means that the actual mid- and slow-paths of the load reference barriers are not all that hot, and we can easily afford to do a little bit of decoding there. It amounts to something like (in pseudocode):&lt;/p&gt; &lt;pre&gt;oop decode_forwarding(oop obj) { mark m = obj-&amp;#62;load_mark(); if ((m &amp;#38; 0b11) == 0b11) { return (oop) (m &amp;#38; ~0b11); } else { return obj; } }&lt;/pre&gt; &lt;p&gt;While this looks noticeably more complicated than the simple load of the forwarding pointer, it is still basically a free lunch because it&amp;#8217;s only ever executed in the not-very-hot mid-path of the load reference barrier. With this, the new object layout would be:&lt;/p&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;0:&lt;/td&gt; &lt;td&gt;[mark word (or fwd pointer)]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;8:&lt;/td&gt; &lt;td&gt;[class word]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;16:&lt;/td&gt; &lt;td&gt;[field 1]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;24:&lt;/td&gt; &lt;td&gt;[field 2]&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;32:&lt;/td&gt; &lt;td&gt;[field 3]&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt; &lt;p&gt;This approach has several advantages:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Obviously, it reduces Shenandoah&amp;#8217;s memory footprint by doing away with the extra word.&lt;/li&gt; &lt;li&gt;Not quite as obviously, it results in increased throughput: We can now allocate more objects before hitting the GC trigger, resulting in fewer cycles spent in actual GC.&lt;/li&gt; &lt;li&gt;Objects are packed more tightly, which results in improved CPU cache pressure.&lt;/li&gt; &lt;li&gt;Again, the required GC interfaces are simpler: Where we needed special implementations of the allocation paths (to reserve and initialize the extra word), we can now use the same allocation code as any other GC.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;To give you an idea of the throughput improvements, note that all the GC sensitive benchmarks that I have tried showed gains between 10% and 15%. Others benefited less or not at all, but that is not surprising for benchmarks that don&amp;#8217;t do any GC at all.&lt;/p&gt; &lt;p&gt;It is, however, important to note that the extra decoding cost does not actually show up anywhere; it is basically negligible. It probably would show up on heavily evacuating workloads, but most applications don&amp;#8217;t evacuate that much, and most of the work is done by GC threads anyway, making mid-path decoding cheap enough.&lt;/p&gt; &lt;p&gt;The implementation of this has &lt;a href="https://mail.openjdk.java.net/pipermail/shenandoah-dev/2019-May/009480.html"&gt;recently been pushed&lt;/a&gt; to the &lt;a href="http://hg.openjdk.java.net/shenandoah/jdk"&gt;Shenandoah/JDK&lt;/a&gt; repository. We are currently shaking out one last known bug, and then it will be ready to go upstream into JDK 13 repository. The plan is to eventually backport it to Shenandoah&amp;#8217;s JDK 11 and JDK 8 backports repositories, and from there into RPMs. If you don&amp;#8217;t want to wait, you can already have it: check out &lt;a href="https://wiki.openjdk.java.net/display/shenandoah/Main"&gt;the Shenandoah GC Wiki&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Read more&lt;/h3&gt; &lt;p&gt;&lt;a href="https://developers.redhat.com/blog/?p=602377"&gt;Shenandoah GC in JDK 13, Part 1: Load reference barriers&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#38;linkname=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2019%2F06%2F28%2Fshenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word%2F&amp;#038;title=Shenandoah%20GC%20in%20JDK%2013%2C%20Part%202%3A%20Eliminating%20the%20forward%20pointer%20word" data-a2a-url="https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/" data-a2a-title="Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/"&gt;Shenandoah GC in JDK 13, Part 2: Eliminating the forward pointer word&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer Blog&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/F6nuuTjd3jY" height="1" width="1" alt=""/&gt;</content><summary>In this series of articles, I’ll be discussing new developments of Shenandoah GC coming up in JDK 13. In part 1, I looked at the switch of Shenandoah’s barrier model to load reference barriers and what that means. The change I want to talk about here addresses another frequent—perhaps the most frequent—concern about Shenandoah GC: the need for an extra word per object. Many believe this is a core ...</summary><dc:creator>Roman Kennke</dc:creator><dc:date>2019-06-28T07:00:52Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2019/06/28/shenandoah-gc-in-jdk-13-part-2-eliminating-the-forward-pointer-word/</feedburner:origLink></entry></feed>
